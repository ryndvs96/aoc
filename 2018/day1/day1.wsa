label_0:
	push 1
	jmp label_1
label_1:
	# read input
	push 1
	add
	dup
	dup
	readc
	dup
	retrieve
	push 43
	sub
	dup
	jz label_2
	push 57
	sub
	jz label_3
	dup
	readi
	dup
	retrieve
	push -1
	mul
	store
	jmp label_1
label_2:
	drop
	readi
	jmp label_1
label_3:
	push 0
	store
	push 1
	swap
	store
	push 2
label_4:
	# sum everything up (pt1)
	dup
	push 1
	retrieve
	sub
	jz label_5
	dup
	retrieve
	push 1
	retrieve
	retrieve
	add
	push 1
	retrieve
	swap
	store
	push 1
	add
	jmp label_4
label_5:
	# print final sum (pt1)
	push 1
	retrieve
	retrieve
	printi
	push 10
	printc
	push 1
	retrieve
	push 0
	store
	push 0
	push 0
	store
label_6:
	# initialize heap for looping the sum (pt2)
	push 0
	retrieve
	push 1
	add
	dup
	push 0
	swap
	store
	push 1
	retrieve
	add
	push 1
	retrieve
	retrieve
	store
	drop
	push 1
label_7:
	# i is on top of stack
	push 1
	# add 1 to i
	add
	# check if i is equal to length, we gotta reset it
	dup
	push 1
	retrieve
	sub
	jz label_11
	dup
	# get val at index i
	retrieve
	# add it to current sum
	push 1
	retrieve
	retrieve
	add
	# store it again
	push 1
	retrieve
	swap
	store
	# now check all known sums
	# init j = 1 and go until heap[-1] is exceeded
	push 2
	jmp label_9
label_8:
	drop
	# store current sum and continue
	# update heap counter
	push 0
	retrieve
	push 1
	add
	dup
	push 0
	swap
	store
	# store new sum
	push 1
	retrieve
	retrieve
	swap
	push 2
	retrieve
	add
	swap
	store
	jmp label_7
label_9:
	dup
	push 0
	retrieve
	push 2
	add
	sub
	# jump out if j == heap[-1] + 1
	jz label_8
	dup
	# compare sum to val in heap [n + j]
	push 1
	retrieve
	add
	retrieve
	push 1
	retrieve
	retrieve
	sub
	# jump if current sum is equal to sum in heap
	jz label_10
	# else increment j and continue
	push 1
	add
	jmp label_9
label_10:
	push 1
	retrieve
	retrieve
	printi
	jmp label_12
label_11:
	drop
	push 1
	jmp label_7
label_12:
	push 10
	printc